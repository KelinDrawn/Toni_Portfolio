<div class="theme-switcher">
  <label for="theme-select">
    <span class="theme-icon light-icon">‚òÄÔ∏è&nbsp;</span>
    <span class="theme-icon dark-icon">üåô&nbsp;</span></label
  >
  <select id="theme-select">
    <option id="theme-system" value="system">System</option>
    <option id="theme-light" value="light">Light</option>
    <option id="theme-dark" value="dark">Dark</option>
  </select>
</div>

<style>
  :root {
    color-scheme: light dark;
    --filter-grayscale: grayscale(1);
    --theme-filter: none;
  }

  html[data-theme="light"] {
    color-scheme: light;
    --theme-filter: none;
  }

  html[data-theme="dark"] {
    color-scheme: dark;
    --theme-filter: var(--filter-grayscale);
  }

  html[data-theme="system"] {
    color-scheme: light dark;
  }

  @media (prefers-color-scheme: dark) {
    html[data-theme="system"] {
      --theme-filter: var(--filter-grayscale);
    }
  }

  /* change icon ‚òÄÔ∏èüåô depending on theme mode */
  html[data-theme="light"] .light-icon {
    display: inline;
  }
  html[data-theme="light"] .dark-icon {
    display: none;
  }

  /* Dark mode display */
  html[data-theme="dark"] .light-icon {
    display: none;
  }
  html[data-theme="dark"] .dark-icon {
    display: inline;
  }

  /* change icon ‚òÄÔ∏èüåô  for system mode */
  html[data-theme="system"] .light-icon {
    display: inline;
  }
  html[data-theme="system"] .dark-icon {
    display: none;
  }

  @media (prefers-color-scheme: dark) {
    html[data-theme="system"] .light-icon {
      display: none;
    }
    html[data-theme="system"] .dark-icon {
      display: inline;
    }
  }

  select {
    background-color: var(--color-white, #f0f0f0);
    color: var(--color-black, #333);
    border: var(--border-transparent);
    border-radius: var(--border-radius, 1px);
    padding: 0.2ex 2.5ch 0.2ex 0.5rem;
    font-family: inherit;
    font-size: var(--step-0);
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;

    cursor: pointer;

    transition:
      border-color var(--transition-initial),
      box-shadow var(--transition-initial);
  }

  select:hover {
    border-color: var(--color-black, #333);
  }

  .theme-switcher {
    position: relative;
  }

  .theme-switcher::after {
    content: "‚ñæ";
    font-size: 1em;
    color: var(--color-black, #333);
    position: absolute;
    right: 0.8em;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none; /* Makes sure clicking the arrow activates the select */
  }
</style>

<script>
  (function () {
    const THEME_KEY = "theme";
    const html = document.documentElement;
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const themeSelect = document.getElementById("theme-select");
    let theme = localStorage.getItem(THEME_KEY) || "system";

    function updateDarkModeImages(theme) {
      document.querySelectorAll("source[data-media-dark]").forEach((source) => {
        source.media =
          theme === "dark"
            ? "all"
            : theme === "light"
              ? "none"
              : "(prefers-color-scheme: dark)";
      });
    }

    function applyTheme(theme) {
      html.setAttribute("data-theme", theme);
      if (theme === "light") {
        html.style.setProperty("color-scheme", "light");
      } else if (theme === "dark") {
        html.style.setProperty("color-scheme", "dark");
      } else {
        html.style.setProperty("color-scheme", "light dark");
      }

      // Update dark mode images
      updateDarkModeImages(theme);

      // Update the select dropdown to reflect the current theme
      themeSelect.value = theme;
    }

    // Listen for system changes if "system" is selected
    function handleSystemChange() {
      if ((localStorage.getItem(THEME_KEY) || "system") === "system") {
        applyTheme("system");
      }
    }
    mediaQuery.addEventListener("change", handleSystemChange);

    // Initial application
    applyTheme(theme);

    // Attach event listener to the theme switcher
    themeSelect.addEventListener("change", (e) => {
      const newTheme = e.target.value;
      localStorage.setItem(THEME_KEY, newTheme);
      applyTheme(newTheme);
    });
  })();
</script>
